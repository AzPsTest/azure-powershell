//
// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Warning: This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using Microsoft.Azure.Commands.Compute.Automation.Models;
using Microsoft.Azure.Commands.Compute.Common;
using Microsoft.Azure.Commands.Compute.Models;
using Microsoft.Azure.Commands.ResourceManager.Common.ArgumentCompleters;
using Microsoft.Azure.Management.Compute;
using Microsoft.Azure.Management.Compute.Models;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;

namespace Microsoft.Azure.Commands.Compute.Automation
{
    public partial class InvokeAzureComputeMethodCmdlet : ComputeAutomationBaseCmdlet
    {
        protected object CreateVirtualMachineScaleSetUpdateDynamicParameters()
        {
            dynamicParameters = new RuntimeDefinedParameterDictionary();
            var pResourceGroupName = new RuntimeDefinedParameter();
            pResourceGroupName.Name = "ResourceGroupName";
            pResourceGroupName.ParameterType = typeof(string);
            pResourceGroupName.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 1,
                Mandatory = true
            });
            pResourceGroupName.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("ResourceGroupName", pResourceGroupName);

            var pVMScaleSetName = new RuntimeDefinedParameter();
            pVMScaleSetName.Name = "VMScaleSetName";
            pVMScaleSetName.ParameterType = typeof(string);
            pVMScaleSetName.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 2,
                Mandatory = true
            });
            pVMScaleSetName.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("VMScaleSetName", pVMScaleSetName);

            var pParameters = new RuntimeDefinedParameter();
            pParameters.Name = "VirtualMachineScaleSetUpdate";
            pParameters.ParameterType = typeof(VirtualMachineScaleSetUpdate);
            pParameters.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByDynamicParameters",
                Position = 3,
                Mandatory = true
            });
            pParameters.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("VirtualMachineScaleSetUpdate", pParameters);

            var pArgumentList = new RuntimeDefinedParameter();
            pArgumentList.Name = "ArgumentList";
            pArgumentList.ParameterType = typeof(object[]);
            pArgumentList.Attributes.Add(new ParameterAttribute
            {
                ParameterSetName = "InvokeByStaticParameters",
                Position = 4,
                Mandatory = true
            });
            pArgumentList.Attributes.Add(new AllowNullAttribute());
            dynamicParameters.Add("ArgumentList", pArgumentList);

            return dynamicParameters;
        }

        protected void ExecuteVirtualMachineScaleSetUpdateMethod(object[] invokeMethodInputParameters)
        {
            string resourceGroupName = (string)ParseParameter(invokeMethodInputParameters[0]);
            string vmScaleSetName = (string)ParseParameter(invokeMethodInputParameters[1]);
            VirtualMachineScaleSetUpdate parameters = (VirtualMachineScaleSetUpdate)ParseParameter(invokeMethodInputParameters[2]);
            VirtualMachineScaleSet parametersOrg = (VirtualMachineScaleSet)ParseParameter(invokeMethodInputParameters[3]);

            var result = parameters == null
                         ? VirtualMachineScaleSetsClient.CreateOrUpdate(resourceGroupName, vmScaleSetName, parametersOrg)
                         : VirtualMachineScaleSetsClient.Update(resourceGroupName, vmScaleSetName, parameters);
            WriteObject(result);
        }
    }

    public partial class NewAzureComputeArgumentListCmdlet : ComputeAutomationBaseCmdlet
    {
        protected PSArgument[] CreateVirtualMachineScaleSetUpdateParameters()
        {
            string resourceGroupName = string.Empty;
            string vmScaleSetName = string.Empty;
            VirtualMachineScaleSetUpdate parameters = new VirtualMachineScaleSetUpdate();

            return ConvertFromObjectsToArguments(
                 new[] { "ResourceGroupName", "VMScaleSetName", "Parameters" },
                 new object[] { resourceGroupName, vmScaleSetName, parameters });
        }
    }

    [Cmdlet(VerbsData.Update, "AzureRmVmss", DefaultParameterSetName = "DefaultParameter", SupportsShouldProcess = true)]
    [OutputType(typeof(PSVirtualMachineScaleSet))]
    public partial class UpdateAzureRmVmss : ComputeAutomationBaseCmdlet
    {
        public override void ExecuteCmdlet()
        {
            ExecuteClientAction(() =>
            {
                if (ShouldProcess(VMScaleSetName, VerbsData.Update))
                {
                    string resourceGroupName = ResourceGroupName;
                    string vmScaleSetName = VMScaleSetName;
                    if (VirtualMachineScaleSet == null)
                    {
                        BuildPatchObject();
                    }
                    else
                    {
                        BuildPutObject();
                    }
                    VirtualMachineScaleSetUpdate parametersupdate = VirtualMachineScaleSetUpdate;
                    VirtualMachineScaleSet parameters = new VirtualMachineScaleSet();
                    ComputeAutomationAutoMapperProfile.Mapper.Map<PSVirtualMachineScaleSet, VirtualMachineScaleSet>(VirtualMachineScaleSet, parameters);

                    var result = VirtualMachineScaleSetUpdate == null
                                 ? VirtualMachineScaleSetsClient.CreateOrUpdate(resourceGroupName, vmScaleSetName, parameters)
                                 : VirtualMachineScaleSetsClient.Update(resourceGroupName, vmScaleSetName, parametersupdate);
                    var psObject = new PSVirtualMachineScaleSet();
                    ComputeAutomationAutoMapperProfile.Mapper.Map<VirtualMachineScaleSet, PSVirtualMachineScaleSet>(result, psObject);
                    WriteObject(psObject);
                }
            });
        }

        [Parameter(
            Position = 1,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true)]
        [ResourceGroupCompleter]
        public string ResourceGroupName { get; set; }

        [Parameter(
            Position = 2,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true)]
        [Alias("Name")]
        public string VMScaleSetName { get; set; }

        public VirtualMachineScaleSetUpdate VirtualMachineScaleSetUpdate { get; set; }

        [Parameter(
            Position = 3,
            Mandatory = false,
            ValueFromPipelineByPropertyName = false,
            ValueFromPipeline = true)]
        [AllowNull]
        public PSVirtualMachineScaleSet VirtualMachineScaleSet { get; set; }

        [Parameter(
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public string ImageReferenceSku { get; set; }

        [Parameter(
            ParameterSetName = "ExplicitIdentityParameterSet",
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public string[] IdentityId { get; set; }

        [Parameter(
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        [PSArgumentCompleter("Standard_LRS", "Premium_LRS")]
        public string ManagedDiskStorageAccountType { get; set; }

        [Parameter(
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public string PlanPublisher { get; set; }

        [Parameter(
            Mandatory = false)]
        public bool ProvisionVMAgent { get; set; }

        [Parameter(
            Mandatory = false)]
        public bool BootDiagnosticsEnabled { get; set; }

        [Parameter(
            Mandatory = false)]
        public bool Overprovision { get; set; }

        [Parameter(
            Mandatory = false)]
        public int MaxBatchInstancePercent { get; set; }

        [Parameter(
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public string TimeZone { get; set; }

        [Parameter(
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public string BootDiagnosticsStorageUri { get; set; }

        [Parameter(
            Mandatory = false)]
        public bool AutomaticOSUpgrade { get; set; }

        [Parameter(
            Mandatory = false)]
        public bool SinglePlacementGroup { get; set; }

        [Parameter(
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public string CustomData { get; set; }

        [Parameter(
            Mandatory = false)]
        public UpgradeMode UpgradePolicyMode { get; set; }

        [Parameter(
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public string ImageReferenceId { get; set; }

        [Parameter(
            Mandatory = false)]
        public bool DisablePasswordAuthentication { get; set; }

        [Parameter(
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public Hashtable Tag { get; set; }

        [Parameter(
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public string PlanName { get; set; }

        [Parameter(
            Mandatory = false)]
        public int MaxUnhealthyUpgradedInstancePercent { get; set; }

        [Parameter(
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public string ImageReferencePublisher { get; set; }

        [Parameter(
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public string PlanProduct { get; set; }

        [Parameter(
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public string[] VhdContainer { get; set; }

        [Parameter(
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public string ImageUri { get; set; }

        [Parameter(
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public string SkuTier { get; set; }

        [Parameter(
            Mandatory = false)]
        public bool EnableAutomaticUpdate { get; set; }

        [Parameter(
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public string LicenseType { get; set; }

        [Parameter(
            ParameterSetName = "ExplicitIdentityParameterSet",
            Mandatory = true)]
        [ValidateNotNullOrEmpty]
        public ResourceIdentityType? IdentityType { get; set; }

        [Parameter(
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public string SkuName { get; set; }

        [Parameter(
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public string PlanPromotionCode { get; set; }

        [Parameter(
            Mandatory = false)]
        public int MaxUnhealthyInstancePercent { get; set; }

        [Parameter(
            Mandatory = false)]
        public int SkuCapacity { get; set; }

        [Parameter(
            Mandatory = false)]
        public bool OsDiskWriteAccelerator { get; set; }

        [Parameter(
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public string ImageReferenceOffer { get; set; }

        [Parameter(
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public string PauseTimeBetweenBatches { get; set; }

        [Parameter(
            Mandatory = false)]
        public CachingTypes OsDiskCaching { get; set; }

        [Parameter(
            Mandatory = false)]
        [ValidateNotNullOrEmpty]
        public string ImageReferenceVersion { get; set; }

        [Parameter(Mandatory = false, HelpMessage = "Run cmdlet in the background")]
        public SwitchParameter AsJob { get; set; }

        private void BuildPatchObject()
        {
            if (MyInvocation.BoundParameters.ContainsKey("ImageReferenceSku"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile = new VirtualMachineScaleSetUpdateVMProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetUpdateStorageProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference = new ImageReference();
                }
                VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference.Sku = ImageReferenceSku;
            }

            if (MyInvocation.BoundParameters.ContainsKey("IdentityId"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.Identity == null)
                {
                    VirtualMachineScaleSetUpdate.Identity = new VirtualMachineScaleSetIdentity();
                }
                VirtualMachineScaleSetUpdate.Identity.IdentityIds = IdentityId;
            }

            if (MyInvocation.BoundParameters.ContainsKey("ManagedDiskStorageAccountType"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile = new VirtualMachineScaleSetUpdateVMProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetUpdateStorageProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk = new VirtualMachineScaleSetUpdateOSDisk();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk = new VirtualMachineScaleSetManagedDiskParameters();
                }
                VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk.StorageAccountType = ManagedDiskStorageAccountType;
            }

            if (MyInvocation.BoundParameters.ContainsKey("PlanPublisher"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.Plan == null)
                {
                    VirtualMachineScaleSetUpdate.Plan = new Plan();
                }
                VirtualMachineScaleSetUpdate.Plan.Publisher = PlanPublisher;
            }

            if (MyInvocation.BoundParameters.ContainsKey("ProvisionVMAgent"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile = new VirtualMachineScaleSetUpdateVMProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile = new VirtualMachineScaleSetUpdateOSProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.WindowsConfiguration == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.WindowsConfiguration = new WindowsConfiguration();
                }
                VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.WindowsConfiguration.ProvisionVMAgent = ProvisionVMAgent;
            }

            if (MyInvocation.BoundParameters.ContainsKey("BootDiagnosticsEnabled"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile = new VirtualMachineScaleSetUpdateVMProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.DiagnosticsProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.DiagnosticsProfile = new DiagnosticsProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics = new BootDiagnostics();
                }
                VirtualMachineScaleSetUpdate.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics.Enabled = BootDiagnosticsEnabled;
            }

            if (MyInvocation.BoundParameters.ContainsKey("Overprovision"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                VirtualMachineScaleSetUpdate.Overprovision = Overprovision;
            }

            if (MyInvocation.BoundParameters.ContainsKey("MaxBatchInstancePercent"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.UpgradePolicy == null)
                {
                    VirtualMachineScaleSetUpdate.UpgradePolicy = new UpgradePolicy();
                }
                if (VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy == null)
                {
                    VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy = new RollingUpgradePolicy();
                }
                VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy.MaxBatchInstancePercent = MaxBatchInstancePercent;
            }

            if (MyInvocation.BoundParameters.ContainsKey("TimeZone"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile = new VirtualMachineScaleSetUpdateVMProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile = new VirtualMachineScaleSetUpdateOSProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.WindowsConfiguration == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.WindowsConfiguration = new WindowsConfiguration();
                }
                VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.WindowsConfiguration.TimeZone = TimeZone;
            }

            if (MyInvocation.BoundParameters.ContainsKey("BootDiagnosticsStorageUri"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile = new VirtualMachineScaleSetUpdateVMProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.DiagnosticsProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.DiagnosticsProfile = new DiagnosticsProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics = new BootDiagnostics();
                }
                VirtualMachineScaleSetUpdate.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics.StorageUri = BootDiagnosticsStorageUri;
            }

            if (MyInvocation.BoundParameters.ContainsKey("AutomaticOSUpgrade"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.UpgradePolicy == null)
                {
                    VirtualMachineScaleSetUpdate.UpgradePolicy = new UpgradePolicy();
                }
                VirtualMachineScaleSetUpdate.UpgradePolicy.AutomaticOSUpgrade = AutomaticOSUpgrade;
            }

            if (MyInvocation.BoundParameters.ContainsKey("SinglePlacementGroup"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                VirtualMachineScaleSetUpdate.SinglePlacementGroup = SinglePlacementGroup;
            }

            if (MyInvocation.BoundParameters.ContainsKey("CustomData"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile = new VirtualMachineScaleSetUpdateVMProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile = new VirtualMachineScaleSetUpdateOSProfile();
                }
                VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.CustomData = CustomData;
            }

            if (MyInvocation.BoundParameters.ContainsKey("UpgradePolicyMode"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.UpgradePolicy == null)
                {
                    VirtualMachineScaleSetUpdate.UpgradePolicy = new UpgradePolicy();
                }
                VirtualMachineScaleSetUpdate.UpgradePolicy.Mode = UpgradePolicyMode;
            }

            if (MyInvocation.BoundParameters.ContainsKey("ImageReferenceId"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile = new VirtualMachineScaleSetUpdateVMProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetUpdateStorageProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference = new ImageReference();
                }
                VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference.Id = ImageReferenceId;
            }

            if (MyInvocation.BoundParameters.ContainsKey("DisablePasswordAuthentication"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile = new VirtualMachineScaleSetUpdateVMProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile = new VirtualMachineScaleSetUpdateOSProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.LinuxConfiguration == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.LinuxConfiguration = new LinuxConfiguration();
                }
                VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.LinuxConfiguration.DisablePasswordAuthentication = DisablePasswordAuthentication;
            }

            if (MyInvocation.BoundParameters.ContainsKey("Tag"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                VirtualMachineScaleSetUpdate.Tags = Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key, ht => (string)ht.Value);
            }

            if (MyInvocation.BoundParameters.ContainsKey("PlanName"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.Plan == null)
                {
                    VirtualMachineScaleSetUpdate.Plan = new Plan();
                }
                VirtualMachineScaleSetUpdate.Plan.Name = PlanName;
            }

            if (MyInvocation.BoundParameters.ContainsKey("MaxUnhealthyUpgradedInstancePercent"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.UpgradePolicy == null)
                {
                    VirtualMachineScaleSetUpdate.UpgradePolicy = new UpgradePolicy();
                }
                if (VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy == null)
                {
                    VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy = new RollingUpgradePolicy();
                }
                VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy.MaxUnhealthyUpgradedInstancePercent = MaxUnhealthyUpgradedInstancePercent;
            }

            if (MyInvocation.BoundParameters.ContainsKey("ImageReferencePublisher"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile = new VirtualMachineScaleSetUpdateVMProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetUpdateStorageProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference = new ImageReference();
                }
                VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference.Publisher = ImageReferencePublisher;
            }

            if (MyInvocation.BoundParameters.ContainsKey("PlanProduct"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.Plan == null)
                {
                    VirtualMachineScaleSetUpdate.Plan = new Plan();
                }
                VirtualMachineScaleSetUpdate.Plan.Product = PlanProduct;
            }

            if (MyInvocation.BoundParameters.ContainsKey("VhdContainer"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile = new VirtualMachineScaleSetUpdateVMProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetUpdateStorageProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk = new VirtualMachineScaleSetUpdateOSDisk();
                }
                VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk.VhdContainers = VhdContainer;
            }

            if (MyInvocation.BoundParameters.ContainsKey("ImageUri"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile = new VirtualMachineScaleSetUpdateVMProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetUpdateStorageProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk = new VirtualMachineScaleSetUpdateOSDisk();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk.Image == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk.Image = new VirtualHardDisk();
                }
                VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk.Image.Uri = ImageUri;
            }

            if (MyInvocation.BoundParameters.ContainsKey("SkuTier"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.Sku == null)
                {
                    VirtualMachineScaleSetUpdate.Sku = new Sku();
                }
                VirtualMachineScaleSetUpdate.Sku.Tier = SkuTier;
            }

            if (MyInvocation.BoundParameters.ContainsKey("EnableAutomaticUpdate"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile = new VirtualMachineScaleSetUpdateVMProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile = new VirtualMachineScaleSetUpdateOSProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.WindowsConfiguration == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.WindowsConfiguration = new WindowsConfiguration();
                }
                VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.WindowsConfiguration.EnableAutomaticUpdates = EnableAutomaticUpdate;
            }

            if (MyInvocation.BoundParameters.ContainsKey("LicenseType"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile = new VirtualMachineScaleSetUpdateVMProfile();
                }
                VirtualMachineScaleSetUpdate.VirtualMachineProfile.LicenseType = LicenseType;
            }

            if (MyInvocation.BoundParameters.ContainsKey("IdentityType"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.Identity == null)
                {
                    VirtualMachineScaleSetUpdate.Identity = new VirtualMachineScaleSetIdentity();
                }
                VirtualMachineScaleSetUpdate.Identity.Type = IdentityType;
            }

            if (MyInvocation.BoundParameters.ContainsKey("SkuName"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.Sku == null)
                {
                    VirtualMachineScaleSetUpdate.Sku = new Sku();
                }
                VirtualMachineScaleSetUpdate.Sku.Name = SkuName;
            }

            if (MyInvocation.BoundParameters.ContainsKey("PlanPromotionCode"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.Plan == null)
                {
                    VirtualMachineScaleSetUpdate.Plan = new Plan();
                }
                VirtualMachineScaleSetUpdate.Plan.PromotionCode = PlanPromotionCode;
            }

            if (MyInvocation.BoundParameters.ContainsKey("MaxUnhealthyInstancePercent"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.UpgradePolicy == null)
                {
                    VirtualMachineScaleSetUpdate.UpgradePolicy = new UpgradePolicy();
                }
                if (VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy == null)
                {
                    VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy = new RollingUpgradePolicy();
                }
                VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy.MaxUnhealthyInstancePercent = MaxUnhealthyInstancePercent;
            }

            if (MyInvocation.BoundParameters.ContainsKey("SkuCapacity"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.Sku == null)
                {
                    VirtualMachineScaleSetUpdate.Sku = new Sku();
                }
                VirtualMachineScaleSetUpdate.Sku.Capacity = SkuCapacity;
            }

            if (MyInvocation.BoundParameters.ContainsKey("OsDiskWriteAccelerator"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile = new VirtualMachineScaleSetUpdateVMProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetUpdateStorageProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk = new VirtualMachineScaleSetUpdateOSDisk();
                }
                VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk.WriteAcceleratorEnabled = OsDiskWriteAccelerator;
            }

            if (MyInvocation.BoundParameters.ContainsKey("ImageReferenceOffer"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile = new VirtualMachineScaleSetUpdateVMProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetUpdateStorageProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference = new ImageReference();
                }
                VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference.Offer = ImageReferenceOffer;
            }

            if (MyInvocation.BoundParameters.ContainsKey("PauseTimeBetweenBatches"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.UpgradePolicy == null)
                {
                    VirtualMachineScaleSetUpdate.UpgradePolicy = new UpgradePolicy();
                }
                if (VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy == null)
                {
                    VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy = new RollingUpgradePolicy();
                }
                VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy.PauseTimeBetweenBatches = PauseTimeBetweenBatches;
            }

            if (MyInvocation.BoundParameters.ContainsKey("OsDiskCaching"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile = new VirtualMachineScaleSetUpdateVMProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetUpdateStorageProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk = new VirtualMachineScaleSetUpdateOSDisk();
                }
                VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk.Caching = OsDiskCaching;
            }

            if (MyInvocation.BoundParameters.ContainsKey("ImageReferenceVersion"))
            {
                if (VirtualMachineScaleSetUpdate == null)
                {
                    VirtualMachineScaleSetUpdate = new VirtualMachineScaleSetUpdate();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile = new VirtualMachineScaleSetUpdateVMProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetUpdateStorageProfile();
                }
                if (VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference == null)
                {
                    VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference = new ImageReference();
                }
                VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference.Version = ImageReferenceVersion;
            }

            if (VirtualMachineScaleSetUpdate != null
                && VirtualMachineScaleSetUpdate.VirtualMachineProfile != null
                && VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile != null
                && VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.WindowsConfiguration != null
                && VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.LinuxConfiguration != null)
            {
                throw new ArgumentException(Properties.Resources.BothWindowsAndLinuxConfigurationsSpecified);
            }
        }

        private void BuildPutObject()
        {
            if (MyInvocation.BoundParameters.ContainsKey("ImageReferenceSku"))
            {
                if (VirtualMachineScaleSet.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile = new VirtualMachineScaleSetVMProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetStorageProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference = new ImageReference();
                }
                VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference.Sku = ImageReferenceSku;
            }

            if (MyInvocation.BoundParameters.ContainsKey("IdentityId"))
            {
                if (VirtualMachineScaleSet.Identity == null)
                {
                    VirtualMachineScaleSet.Identity = new VirtualMachineScaleSetIdentity();
                }
                VirtualMachineScaleSet.Identity.IdentityIds = IdentityId;
            }

            if (MyInvocation.BoundParameters.ContainsKey("ManagedDiskStorageAccountType"))
            {
                WriteWarning("Update-AzureRmVmss: The accepted values for parameter ManagedDiskStorageAccountType will change in an upcoming breaking change release " +
                             "from StandardLRS and PremiumLRS to Standard_LRS and Premium_LRS, respectively.");

                if (VirtualMachineScaleSet.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile = new VirtualMachineScaleSetVMProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetStorageProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk = new VirtualMachineScaleSetOSDisk();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk = new VirtualMachineScaleSetManagedDiskParameters();
                }
                VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk.StorageAccountType = ManagedDiskStorageAccountType;
            }

            if (MyInvocation.BoundParameters.ContainsKey("PlanPublisher"))
            {
                if (VirtualMachineScaleSet.Plan == null)
                {
                    VirtualMachineScaleSet.Plan = new Plan();
                }
                VirtualMachineScaleSet.Plan.Publisher = PlanPublisher;
            }

            if (MyInvocation.BoundParameters.ContainsKey("ProvisionVMAgent"))
            {
                if (VirtualMachineScaleSet.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile = new VirtualMachineScaleSetVMProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.OsProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new VirtualMachineScaleSetOSProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration = new WindowsConfiguration();
                }
                VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.ProvisionVMAgent = ProvisionVMAgent;
            }

            if (MyInvocation.BoundParameters.ContainsKey("BootDiagnosticsEnabled"))
            {
                if (VirtualMachineScaleSet.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile = new VirtualMachineScaleSetVMProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile = new DiagnosticsProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics = new BootDiagnostics();
                }
                VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics.Enabled = BootDiagnosticsEnabled;
            }

            if (MyInvocation.BoundParameters.ContainsKey("Overprovision"))
            {
                VirtualMachineScaleSet.Overprovision = Overprovision;
            }

            if (MyInvocation.BoundParameters.ContainsKey("MaxBatchInstancePercent"))
            {
                if (VirtualMachineScaleSet.UpgradePolicy == null)
                {
                    VirtualMachineScaleSet.UpgradePolicy = new UpgradePolicy();
                }
                if (VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy == null)
                {
                    VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy = new RollingUpgradePolicy();
                }
                VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy.MaxBatchInstancePercent = MaxBatchInstancePercent;
            }

            if (MyInvocation.BoundParameters.ContainsKey("TimeZone"))
            {
                if (VirtualMachineScaleSet.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile = new VirtualMachineScaleSetVMProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.OsProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new VirtualMachineScaleSetOSProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration = new WindowsConfiguration();
                }
                VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.TimeZone = TimeZone;
            }

            if (MyInvocation.BoundParameters.ContainsKey("BootDiagnosticsStorageUri"))
            {
                if (VirtualMachineScaleSet.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile = new VirtualMachineScaleSetVMProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile = new DiagnosticsProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics = new BootDiagnostics();
                }
                VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics.StorageUri = BootDiagnosticsStorageUri;
            }

            if (MyInvocation.BoundParameters.ContainsKey("AutomaticOSUpgrade"))
            {
                if (VirtualMachineScaleSet.UpgradePolicy == null)
                {
                    VirtualMachineScaleSet.UpgradePolicy = new UpgradePolicy();
                }
                VirtualMachineScaleSet.UpgradePolicy.AutomaticOSUpgrade = AutomaticOSUpgrade;
            }

            if (MyInvocation.BoundParameters.ContainsKey("SinglePlacementGroup"))
            {
                VirtualMachineScaleSet.SinglePlacementGroup = SinglePlacementGroup;
            }

            if (MyInvocation.BoundParameters.ContainsKey("CustomData"))
            {
                if (VirtualMachineScaleSet.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile = new VirtualMachineScaleSetVMProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.OsProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new VirtualMachineScaleSetOSProfile();
                }
                VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.CustomData = CustomData;
            }

            if (MyInvocation.BoundParameters.ContainsKey("UpgradePolicyMode"))
            {
                if (VirtualMachineScaleSet.UpgradePolicy == null)
                {
                    VirtualMachineScaleSet.UpgradePolicy = new UpgradePolicy();
                }
                VirtualMachineScaleSet.UpgradePolicy.Mode = UpgradePolicyMode;
            }

            if (MyInvocation.BoundParameters.ContainsKey("ImageReferenceId"))
            {
                if (VirtualMachineScaleSet.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile = new VirtualMachineScaleSetVMProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetStorageProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference = new ImageReference();
                }
                VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference.Id = ImageReferenceId;
            }

            if (MyInvocation.BoundParameters.ContainsKey("DisablePasswordAuthentication"))
            {
                if (VirtualMachineScaleSet.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile = new VirtualMachineScaleSetVMProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.OsProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new VirtualMachineScaleSetOSProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.LinuxConfiguration == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.LinuxConfiguration = new LinuxConfiguration();
                }
                VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.LinuxConfiguration.DisablePasswordAuthentication = DisablePasswordAuthentication;
            }

            if (MyInvocation.BoundParameters.ContainsKey("Tag"))
            {
                VirtualMachineScaleSet.Tags = Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key, ht => (string)ht.Value);
            }

            if (MyInvocation.BoundParameters.ContainsKey("PlanName"))
            {
                if (VirtualMachineScaleSet.Plan == null)
                {
                    VirtualMachineScaleSet.Plan = new Plan();
                }
                VirtualMachineScaleSet.Plan.Name = PlanName;
            }

            if (MyInvocation.BoundParameters.ContainsKey("MaxUnhealthyUpgradedInstancePercent"))
            {
                if (VirtualMachineScaleSet.UpgradePolicy == null)
                {
                    VirtualMachineScaleSet.UpgradePolicy = new UpgradePolicy();
                }
                if (VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy == null)
                {
                    VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy = new RollingUpgradePolicy();
                }
                VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy.MaxUnhealthyUpgradedInstancePercent = MaxUnhealthyUpgradedInstancePercent;
            }

            if (MyInvocation.BoundParameters.ContainsKey("ImageReferencePublisher"))
            {
                if (VirtualMachineScaleSet.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile = new VirtualMachineScaleSetVMProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetStorageProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference = new ImageReference();
                }
                VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference.Publisher = ImageReferencePublisher;
            }

            if (MyInvocation.BoundParameters.ContainsKey("PlanProduct"))
            {
                if (VirtualMachineScaleSet.Plan == null)
                {
                    VirtualMachineScaleSet.Plan = new Plan();
                }
                VirtualMachineScaleSet.Plan.Product = PlanProduct;
            }

            if (MyInvocation.BoundParameters.ContainsKey("VhdContainer"))
            {
                if (VirtualMachineScaleSet.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile = new VirtualMachineScaleSetVMProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetStorageProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk = new VirtualMachineScaleSetOSDisk();
                }
                VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.VhdContainers = VhdContainer;
            }

            if (MyInvocation.BoundParameters.ContainsKey("ImageUri"))
            {
                if (VirtualMachineScaleSet.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile = new VirtualMachineScaleSetVMProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetStorageProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk = new VirtualMachineScaleSetOSDisk();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.Image == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.Image = new VirtualHardDisk();
                }
                VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.Image.Uri = ImageUri;
            }

            if (MyInvocation.BoundParameters.ContainsKey("SkuTier"))
            {
                if (VirtualMachineScaleSet.Sku == null)
                {
                    VirtualMachineScaleSet.Sku = new Sku();
                }
                VirtualMachineScaleSet.Sku.Tier = SkuTier;
            }

            if (MyInvocation.BoundParameters.ContainsKey("EnableAutomaticUpdate"))
            {
                if (VirtualMachineScaleSet.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile = new VirtualMachineScaleSetVMProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.OsProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new VirtualMachineScaleSetOSProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration = new WindowsConfiguration();
                }
                VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.EnableAutomaticUpdates = EnableAutomaticUpdate;
            }

            if (MyInvocation.BoundParameters.ContainsKey("LicenseType"))
            {
                if (VirtualMachineScaleSet.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile = new VirtualMachineScaleSetVMProfile();
                }
                VirtualMachineScaleSet.VirtualMachineProfile.LicenseType = LicenseType;
            }

            if (MyInvocation.BoundParameters.ContainsKey("IdentityType"))
            {
                if (VirtualMachineScaleSet.Identity == null)
                {
                    VirtualMachineScaleSet.Identity = new VirtualMachineScaleSetIdentity();
                }
                VirtualMachineScaleSet.Identity.Type = IdentityType;
            }

            if (MyInvocation.BoundParameters.ContainsKey("SkuName"))
            {
                if (VirtualMachineScaleSet.Sku == null)
                {
                    VirtualMachineScaleSet.Sku = new Sku();
                }
                VirtualMachineScaleSet.Sku.Name = SkuName;
            }

            if (MyInvocation.BoundParameters.ContainsKey("PlanPromotionCode"))
            {
                if (VirtualMachineScaleSet.Plan == null)
                {
                    VirtualMachineScaleSet.Plan = new Plan();
                }
                VirtualMachineScaleSet.Plan.PromotionCode = PlanPromotionCode;
            }

            if (MyInvocation.BoundParameters.ContainsKey("MaxUnhealthyInstancePercent"))
            {
                if (VirtualMachineScaleSet.UpgradePolicy == null)
                {
                    VirtualMachineScaleSet.UpgradePolicy = new UpgradePolicy();
                }
                if (VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy == null)
                {
                    VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy = new RollingUpgradePolicy();
                }
                VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy.MaxUnhealthyInstancePercent = MaxUnhealthyInstancePercent;
            }

            if (MyInvocation.BoundParameters.ContainsKey("SkuCapacity"))
            {
                if (VirtualMachineScaleSet.Sku == null)
                {
                    VirtualMachineScaleSet.Sku = new Sku();
                }
                VirtualMachineScaleSet.Sku.Capacity = SkuCapacity;
            }

            if (MyInvocation.BoundParameters.ContainsKey("OsDiskWriteAccelerator"))
            {
                if (VirtualMachineScaleSet.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile = new VirtualMachineScaleSetVMProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetStorageProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk = new VirtualMachineScaleSetOSDisk();
                }
                VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.WriteAcceleratorEnabled = OsDiskWriteAccelerator;
            }

            if (MyInvocation.BoundParameters.ContainsKey("ImageReferenceOffer"))
            {
                if (VirtualMachineScaleSet.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile = new VirtualMachineScaleSetVMProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetStorageProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference = new ImageReference();
                }
                VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference.Offer = ImageReferenceOffer;
            }

            if (MyInvocation.BoundParameters.ContainsKey("PauseTimeBetweenBatches"))
            {
                if (VirtualMachineScaleSet.UpgradePolicy == null)
                {
                    VirtualMachineScaleSet.UpgradePolicy = new UpgradePolicy();
                }
                if (VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy == null)
                {
                    VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy = new RollingUpgradePolicy();
                }
                VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy.PauseTimeBetweenBatches = PauseTimeBetweenBatches;
            }

            if (MyInvocation.BoundParameters.ContainsKey("OsDiskCaching"))
            {
                if (VirtualMachineScaleSet.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile = new VirtualMachineScaleSetVMProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetStorageProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk = new VirtualMachineScaleSetOSDisk();
                }
                VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.Caching = OsDiskCaching;
            }

            if (MyInvocation.BoundParameters.ContainsKey("ImageReferenceVersion"))
            {
                if (VirtualMachineScaleSet.VirtualMachineProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile = new VirtualMachineScaleSetVMProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetStorageProfile();
                }
                if (VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference == null)
                {
                    VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference = new ImageReference();
                }
                VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference.Version = ImageReferenceVersion;
            }

            if (VirtualMachineScaleSet != null
                && VirtualMachineScaleSet.VirtualMachineProfile != null
                && VirtualMachineScaleSet.VirtualMachineProfile.OsProfile != null
                && VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration != null
                && VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.LinuxConfiguration != null)
            {
                throw new ArgumentException(Properties.Resources.BothWindowsAndLinuxConfigurationsSpecified);
            }
        }
    }
}
