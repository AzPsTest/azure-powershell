//
// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Warning: This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using Microsoft.Azure.Commands.Compute.Automation.Models;
using Microsoft.Azure.Management.Compute.Models;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;

namespace Microsoft.Azure.Commands.Compute.Automation
{
    [Cmdlet("Set", "AzureRmDiskKeyEncryptionKey", SupportsShouldProcess = true)]
    [OutputType(typeof(PSDisk))]
    public partial class SetAzureRmDiskKeyEncryptionKeyCommand : ResourceManager.Common.AzureRMCmdlet
    {
        [Parameter(
            Mandatory = true,
            Position = 0,
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public PSDisk Disk { get; set; }

        [Parameter(
            Mandatory = false,
            Position = 1,
            ValueFromPipelineByPropertyName = true)]
        public string KeyUrl { get; set; }

        [Parameter(
            Mandatory = false,
            Position = 2,
            ValueFromPipelineByPropertyName = true)]
        public string SourceVaultId { get; set; }

        protected override void ProcessRecord()
        {
            if (ShouldProcess("Disk", "Set"))
            {
                Run();
            }
        }

        private void Run()
        {
            if (MyInvocation.BoundParameters.ContainsKey("KeyUrl"))
            {
                // EncryptionSettings
                if (Disk.EncryptionSettings == null)
                {
                    Disk.EncryptionSettings = new EncryptionSettings();
                }
                // KeyEncryptionKey
                if (Disk.EncryptionSettings.KeyEncryptionKey == null)
                {
                    Disk.EncryptionSettings.KeyEncryptionKey = new KeyVaultAndKeyReference();
                }
                Disk.EncryptionSettings.KeyEncryptionKey.KeyUrl = KeyUrl;
            }

            if (MyInvocation.BoundParameters.ContainsKey("SourceVaultId"))
            {
                // EncryptionSettings
                if (Disk.EncryptionSettings == null)
                {
                    Disk.EncryptionSettings = new EncryptionSettings();
                }
                // KeyEncryptionKey
                if (Disk.EncryptionSettings.KeyEncryptionKey == null)
                {
                    Disk.EncryptionSettings.KeyEncryptionKey = new KeyVaultAndKeyReference();
                }
                // SourceVault
                if (Disk.EncryptionSettings.KeyEncryptionKey.SourceVault == null)
                {
                    Disk.EncryptionSettings.KeyEncryptionKey.SourceVault = new SourceVault();
                }
                Disk.EncryptionSettings.KeyEncryptionKey.SourceVault.Id = SourceVaultId;
            }

            WriteObject(Disk);
        }
    }
}

