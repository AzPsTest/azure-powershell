// -----------------------------------------------------------------------------
﻿//
﻿// Copyright Microsoft Corporation
﻿// Licensed under the Apache License, Version 2.0 (the "License");
﻿// you may not use this file except in compliance with the License.
﻿// You may obtain a copy of the License at
﻿// http://www.apache.org/licenses/LICENSE-2.0
﻿// Unless required by applicable law or agreed to in writing, software
﻿// distributed under the License is distributed on an "AS IS" BASIS,
﻿// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
﻿// See the License for the specific language governing permissions and
﻿// limitations under the License.
﻿// -----------------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Azure.Commands.Batch.Models
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using Azure.Batch;
    
    
    public partial class PSExitConditions
    {
        
        internal ExitConditions omObject;
        
        private PSExitOptions @default;
        
        private IList<PSExitCodeRangeMapping> exitCodeRanges;
        
        private IList<PSExitCodeMapping> exitCodes;
        
        private PSExitOptions fileUploadError;
        
        private PSExitOptions preProcessingError;
        
        public PSExitConditions()
        {
            omObject = new ExitConditions();
        }
        
        internal PSExitConditions(ExitConditions omObject)
        {
            if (omObject == null)
            {
                throw new ArgumentNullException("omObject");
            }
            this.omObject = omObject;
        }
        
        public PSExitOptions Default
        {
            get
            {
                if (@default == null 
                    && omObject.Default != null)
                {
                    @default = new PSExitOptions(omObject.Default);
                }
                return @default;
            }
            set
            {
                if (value == null)
                {
                    omObject.Default = null;
                }
                else
                {
                    omObject.Default = value.omObject;
                }
                @default = value;
            }
        }
        
        public IList<PSExitCodeRangeMapping> ExitCodeRanges
        {
            get
            {
                if (exitCodeRanges == null 
                    && omObject.ExitCodeRanges != null)
                {
                    List<PSExitCodeRangeMapping> list;
                    list = new List<PSExitCodeRangeMapping>();
                    IEnumerator<ExitCodeRangeMapping> enumerator;
                    enumerator = omObject.ExitCodeRanges.GetEnumerator();
                    for (
                    ; enumerator.MoveNext(); 
                    )
                    {
                        list.Add(new PSExitCodeRangeMapping(enumerator.Current));
                    }
                    exitCodeRanges = list;
                }
                return exitCodeRanges;
            }
            set
            {
                if (value == null)
                {
                    omObject.ExitCodeRanges = null;
                }
                else
                {
                    omObject.ExitCodeRanges = new List<ExitCodeRangeMapping>();
                }
                exitCodeRanges = value;
            }
        }
        
        public IList<PSExitCodeMapping> ExitCodes
        {
            get
            {
                if (exitCodes == null 
                    && omObject.ExitCodes != null)
                {
                    List<PSExitCodeMapping> list;
                    list = new List<PSExitCodeMapping>();
                    IEnumerator<ExitCodeMapping> enumerator;
                    enumerator = omObject.ExitCodes.GetEnumerator();
                    for (
                    ; enumerator.MoveNext(); 
                    )
                    {
                        list.Add(new PSExitCodeMapping(enumerator.Current));
                    }
                    exitCodes = list;
                }
                return exitCodes;
            }
            set
            {
                if (value == null)
                {
                    omObject.ExitCodes = null;
                }
                else
                {
                    omObject.ExitCodes = new List<ExitCodeMapping>();
                }
                exitCodes = value;
            }
        }
        
        public PSExitOptions FileUploadError
        {
            get
            {
                if (fileUploadError == null 
                    && omObject.FileUploadError != null)
                {
                    fileUploadError = new PSExitOptions(omObject.FileUploadError);
                }
                return fileUploadError;
            }
            set
            {
                if (value == null)
                {
                    omObject.FileUploadError = null;
                }
                else
                {
                    omObject.FileUploadError = value.omObject;
                }
                fileUploadError = value;
            }
        }
        
        public PSExitOptions PreProcessingError
        {
            get
            {
                if (preProcessingError == null 
                    && omObject.PreProcessingError != null)
                {
                    preProcessingError = new PSExitOptions(omObject.PreProcessingError);
                }
                return preProcessingError;
            }
            set
            {
                if (value == null)
                {
                    omObject.PreProcessingError = null;
                }
                else
                {
                    omObject.PreProcessingError = value.omObject;
                }
                preProcessingError = value;
            }
        }
    }
}
