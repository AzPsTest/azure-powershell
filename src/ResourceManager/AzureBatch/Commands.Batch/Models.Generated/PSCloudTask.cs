// -----------------------------------------------------------------------------
﻿//
﻿// Copyright Microsoft Corporation
﻿// Licensed under the Apache License, Version 2.0 (the "License");
﻿// you may not use this file except in compliance with the License.
﻿// You may obtain a copy of the License at
﻿// http://www.apache.org/licenses/LICENSE-2.0
﻿// Unless required by applicable law or agreed to in writing, software
﻿// distributed under the License is distributed on an "AS IS" BASIS,
﻿// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
﻿// See the License for the specific language governing permissions and
﻿// limitations under the License.
﻿// -----------------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Azure.Commands.Batch.Models
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using Azure.Batch;
    
    
    public partial class PSCloudTask
    {
        
        internal CloudTask omObject;
        
        private PSAffinityInformation affinityInformation;
        
        private IList<PSApplicationPackageReference> applicationPackageReferences;
        
        private PSAuthenticationTokenSettings authenticationTokenSettings;
        
        private PSComputeNodeInformation computeNodeInformation;
        
        private PSTaskConstraints constraints;
        
        private PSTaskContainerSettings containerSettings;
        
        private PSTaskDependencies dependsOn;
        
        private IList<PSEnvironmentSetting> environmentSettings;
        
        private PSTaskExecutionInformation executionInformation;
        
        private PSExitConditions exitConditions;
        
        private PSMultiInstanceSettings multiInstanceSettings;
        
        private IList<PSOutputFile> outputFiles;
        
        private IList<PSResourceFile> resourceFiles;
        
        private PSTaskStatistics statistics;
        
        private PSUserIdentity userIdentity;
        
        public PSCloudTask(string id, string commandline)
        {
            omObject = new CloudTask(id, commandline);
        }
        
        internal PSCloudTask(CloudTask omObject)
        {
            if (omObject == null)
            {
                throw new ArgumentNullException("omObject");
            }
            this.omObject = omObject;
        }
        
        public PSAffinityInformation AffinityInformation
        {
            get
            {
                if (affinityInformation == null 
                    && omObject.AffinityInformation != null)
                {
                    affinityInformation = new PSAffinityInformation(omObject.AffinityInformation);
                }
                return affinityInformation;
            }
            set
            {
                if (value == null)
                {
                    omObject.AffinityInformation = null;
                }
                else
                {
                    omObject.AffinityInformation = value.omObject;
                }
                affinityInformation = value;
            }
        }
        
        public IList<PSApplicationPackageReference> ApplicationPackageReferences
        {
            get
            {
                if (applicationPackageReferences == null 
                    && omObject.ApplicationPackageReferences != null)
                {
                    List<PSApplicationPackageReference> list;
                    list = new List<PSApplicationPackageReference>();
                    IEnumerator<ApplicationPackageReference> enumerator;
                    enumerator = omObject.ApplicationPackageReferences.GetEnumerator();
                    for (
                    ; enumerator.MoveNext(); 
                    )
                    {
                        list.Add(new PSApplicationPackageReference(enumerator.Current));
                    }
                    applicationPackageReferences = list;
                }
                return applicationPackageReferences;
            }
            set
            {
                if (value == null)
                {
                    omObject.ApplicationPackageReferences = null;
                }
                else
                {
                    omObject.ApplicationPackageReferences = new List<ApplicationPackageReference>();
                }
                applicationPackageReferences = value;
            }
        }
        
        public PSAuthenticationTokenSettings AuthenticationTokenSettings
        {
            get
            {
                if (authenticationTokenSettings == null 
                    && omObject.AuthenticationTokenSettings != null)
                {
                    authenticationTokenSettings = new PSAuthenticationTokenSettings(omObject.AuthenticationTokenSettings);
                }
                return authenticationTokenSettings;
            }
            set
            {
                if (value == null)
                {
                    omObject.AuthenticationTokenSettings = null;
                }
                else
                {
                    omObject.AuthenticationTokenSettings = value.omObject;
                }
                authenticationTokenSettings = value;
            }
        }
        
        public string CommandLine
        {
            get
            {
                return omObject.CommandLine;
            }
            set
            {
                omObject.CommandLine = value;
            }
        }
        
        public PSComputeNodeInformation ComputeNodeInformation
        {
            get
            {
                if (computeNodeInformation == null 
                    && omObject.ComputeNodeInformation != null)
                {
                    computeNodeInformation = new PSComputeNodeInformation(omObject.ComputeNodeInformation);
                }
                return computeNodeInformation;
            }
        }
        
        public PSTaskConstraints Constraints
        {
            get
            {
                if (constraints == null 
                    && omObject.Constraints != null)
                {
                    constraints = new PSTaskConstraints(omObject.Constraints);
                }
                return constraints;
            }
            set
            {
                if (value == null)
                {
                    omObject.Constraints = null;
                }
                else
                {
                    omObject.Constraints = value.omObject;
                }
                constraints = value;
            }
        }
        
        public PSTaskContainerSettings ContainerSettings
        {
            get
            {
                if (containerSettings == null 
                    && omObject.ContainerSettings != null)
                {
                    containerSettings = new PSTaskContainerSettings(omObject.ContainerSettings);
                }
                return containerSettings;
            }
            set
            {
                if (value == null)
                {
                    omObject.ContainerSettings = null;
                }
                else
                {
                    omObject.ContainerSettings = value.omObject;
                }
                containerSettings = value;
            }
        }
        
        public DateTime? CreationTime
        {
            get
            {
                return omObject.CreationTime;
            }
        }
        
        public PSTaskDependencies DependsOn
        {
            get
            {
                if (dependsOn == null 
                    && omObject.DependsOn != null)
                {
                    dependsOn = new PSTaskDependencies(omObject.DependsOn);
                }
                return dependsOn;
            }
            set
            {
                if (value == null)
                {
                    omObject.DependsOn = null;
                }
                else
                {
                    omObject.DependsOn = value.omObject;
                }
                dependsOn = value;
            }
        }
        
        public string DisplayName
        {
            get
            {
                return omObject.DisplayName;
            }
            set
            {
                omObject.DisplayName = value;
            }
        }
        
        public IList<PSEnvironmentSetting> EnvironmentSettings
        {
            get
            {
                if (environmentSettings == null 
                    && omObject.EnvironmentSettings != null)
                {
                    List<PSEnvironmentSetting> list;
                    list = new List<PSEnvironmentSetting>();
                    IEnumerator<EnvironmentSetting> enumerator;
                    enumerator = omObject.EnvironmentSettings.GetEnumerator();
                    for (
                    ; enumerator.MoveNext(); 
                    )
                    {
                        list.Add(new PSEnvironmentSetting(enumerator.Current));
                    }
                    environmentSettings = list;
                }
                return environmentSettings;
            }
            set
            {
                if (value == null)
                {
                    omObject.EnvironmentSettings = null;
                }
                else
                {
                    omObject.EnvironmentSettings = new List<EnvironmentSetting>();
                }
                environmentSettings = value;
            }
        }
        
        public string ETag
        {
            get
            {
                return omObject.ETag;
            }
        }
        
        public PSTaskExecutionInformation ExecutionInformation
        {
            get
            {
                if (executionInformation == null 
                    && omObject.ExecutionInformation != null)
                {
                    executionInformation = new PSTaskExecutionInformation(omObject.ExecutionInformation);
                }
                return executionInformation;
            }
        }
        
        public PSExitConditions ExitConditions
        {
            get
            {
                if (exitConditions == null 
                    && omObject.ExitConditions != null)
                {
                    exitConditions = new PSExitConditions(omObject.ExitConditions);
                }
                return exitConditions;
            }
            set
            {
                if (value == null)
                {
                    omObject.ExitConditions = null;
                }
                else
                {
                    omObject.ExitConditions = value.omObject;
                }
                exitConditions = value;
            }
        }
        
        public string Id
        {
            get
            {
                return omObject.Id;
            }
            set
            {
                omObject.Id = value;
            }
        }
        
        public DateTime? LastModified
        {
            get
            {
                return omObject.LastModified;
            }
        }
        
        public PSMultiInstanceSettings MultiInstanceSettings
        {
            get
            {
                if (multiInstanceSettings == null 
                    && omObject.MultiInstanceSettings != null)
                {
                    multiInstanceSettings = new PSMultiInstanceSettings(omObject.MultiInstanceSettings);
                }
                return multiInstanceSettings;
            }
            set
            {
                if (value == null)
                {
                    omObject.MultiInstanceSettings = null;
                }
                else
                {
                    omObject.MultiInstanceSettings = value.omObject;
                }
                multiInstanceSettings = value;
            }
        }
        
        public IList<PSOutputFile> OutputFiles
        {
            get
            {
                if (outputFiles == null 
                    && omObject.OutputFiles != null)
                {
                    List<PSOutputFile> list;
                    list = new List<PSOutputFile>();
                    IEnumerator<OutputFile> enumerator;
                    enumerator = omObject.OutputFiles.GetEnumerator();
                    for (
                    ; enumerator.MoveNext(); 
                    )
                    {
                        list.Add(new PSOutputFile(enumerator.Current));
                    }
                    outputFiles = list;
                }
                return outputFiles;
            }
            set
            {
                if (value == null)
                {
                    omObject.OutputFiles = null;
                }
                else
                {
                    omObject.OutputFiles = new List<OutputFile>();
                }
                outputFiles = value;
            }
        }
        
        public Azure.Batch.Common.TaskState? PreviousState
        {
            get
            {
                return omObject.PreviousState;
            }
        }
        
        public DateTime? PreviousStateTransitionTime
        {
            get
            {
                return omObject.PreviousStateTransitionTime;
            }
        }
        
        public IList<PSResourceFile> ResourceFiles
        {
            get
            {
                if (resourceFiles == null 
                    && omObject.ResourceFiles != null)
                {
                    List<PSResourceFile> list;
                    list = new List<PSResourceFile>();
                    IEnumerator<ResourceFile> enumerator;
                    enumerator = omObject.ResourceFiles.GetEnumerator();
                    for (
                    ; enumerator.MoveNext(); 
                    )
                    {
                        list.Add(new PSResourceFile(enumerator.Current));
                    }
                    resourceFiles = list;
                }
                return resourceFiles;
            }
            set
            {
                if (value == null)
                {
                    omObject.ResourceFiles = null;
                }
                else
                {
                    omObject.ResourceFiles = new List<ResourceFile>();
                }
                resourceFiles = value;
            }
        }
        
        public Azure.Batch.Common.TaskState? State
        {
            get
            {
                return omObject.State;
            }
        }
        
        public DateTime? StateTransitionTime
        {
            get
            {
                return omObject.StateTransitionTime;
            }
        }
        
        public PSTaskStatistics Statistics
        {
            get
            {
                if (statistics == null 
                    && omObject.Statistics != null)
                {
                    statistics = new PSTaskStatistics(omObject.Statistics);
                }
                return statistics;
            }
        }
        
        public string Url
        {
            get
            {
                return omObject.Url;
            }
        }
        
        public PSUserIdentity UserIdentity
        {
            get
            {
                if (userIdentity == null 
                    && omObject.UserIdentity != null)
                {
                    userIdentity = new PSUserIdentity(omObject.UserIdentity);
                }
                return userIdentity;
            }
            set
            {
                if (value == null)
                {
                    omObject.UserIdentity = null;
                }
                else
                {
                    omObject.UserIdentity = value.omObject;
                }
                userIdentity = value;
            }
        }
    }
}
