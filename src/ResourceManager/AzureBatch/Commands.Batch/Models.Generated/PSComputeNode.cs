// -----------------------------------------------------------------------------
﻿//
﻿// Copyright Microsoft Corporation
﻿// Licensed under the Apache License, Version 2.0 (the "License");
﻿// you may not use this file except in compliance with the License.
﻿// You may obtain a copy of the License at
﻿// http://www.apache.org/licenses/LICENSE-2.0
﻿// Unless required by applicable law or agreed to in writing, software
﻿// distributed under the License is distributed on an "AS IS" BASIS,
﻿// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
﻿// See the License for the specific language governing permissions and
﻿// limitations under the License.
﻿// -----------------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Azure.Commands.Batch.Models
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using Azure.Batch;
    
    
    public partial class PSComputeNode
    {
        
        internal ComputeNode omObject;
        
        private IReadOnlyList<PSCertificateReference> certificateReferences;
        
        private PSComputeNodeEndpointConfiguration endpointConfiguration;
        
        private IReadOnlyList<PSComputeNodeError> errors;
        
        private IReadOnlyList<PSTaskInformation> recentTasks;
        
        private PSStartTask startTask;
        
        private PSStartTaskInformation startTaskInformation;
        
        internal PSComputeNode(ComputeNode omObject)
        {
            if (omObject == null)
            {
                throw new ArgumentNullException("omObject");
            }
            this.omObject = omObject;
        }
        
        public string AffinityId
        {
            get
            {
                return omObject.AffinityId;
            }
        }
        
        public DateTime? AllocationTime
        {
            get
            {
                return omObject.AllocationTime;
            }
        }
        
        public IReadOnlyList<PSCertificateReference> CertificateReferences
        {
            get
            {
                if (certificateReferences == null 
                    && omObject.CertificateReferences != null)
                {
                    List<PSCertificateReference> list;
                    list = new List<PSCertificateReference>();
                    IEnumerator<CertificateReference> enumerator;
                    enumerator = omObject.CertificateReferences.GetEnumerator();
                    for (
                    ; enumerator.MoveNext(); 
                    )
                    {
                        list.Add(new PSCertificateReference(enumerator.Current));
                    }
                    certificateReferences = list.AsReadOnly();
                }
                return certificateReferences;
            }
        }
        
        public PSComputeNodeEndpointConfiguration EndpointConfiguration
        {
            get
            {
                if (endpointConfiguration == null 
                    && omObject.EndpointConfiguration != null)
                {
                    endpointConfiguration = new PSComputeNodeEndpointConfiguration(omObject.EndpointConfiguration);
                }
                return endpointConfiguration;
            }
        }
        
        public IReadOnlyList<PSComputeNodeError> Errors
        {
            get
            {
                if (errors == null 
                    && omObject.Errors != null)
                {
                    List<PSComputeNodeError> list;
                    list = new List<PSComputeNodeError>();
                    IEnumerator<ComputeNodeError> enumerator;
                    enumerator = omObject.Errors.GetEnumerator();
                    for (
                    ; enumerator.MoveNext(); 
                    )
                    {
                        list.Add(new PSComputeNodeError(enumerator.Current));
                    }
                    errors = list.AsReadOnly();
                }
                return errors;
            }
        }
        
        public string Id
        {
            get
            {
                return omObject.Id;
            }
        }
        
        public string IPAddress
        {
            get
            {
                return omObject.IPAddress;
            }
        }
        
        public Boolean? IsDedicated
        {
            get
            {
                return omObject.IsDedicated;
            }
        }
        
        public DateTime? LastBootTime
        {
            get
            {
                return omObject.LastBootTime;
            }
        }
        
        public IReadOnlyList<PSTaskInformation> RecentTasks
        {
            get
            {
                if (recentTasks == null 
                    && omObject.RecentTasks != null)
                {
                    List<PSTaskInformation> list;
                    list = new List<PSTaskInformation>();
                    IEnumerator<TaskInformation> enumerator;
                    enumerator = omObject.RecentTasks.GetEnumerator();
                    for (
                    ; enumerator.MoveNext(); 
                    )
                    {
                        list.Add(new PSTaskInformation(enumerator.Current));
                    }
                    recentTasks = list.AsReadOnly();
                }
                return recentTasks;
            }
        }
        
        public Int32? RunningTasksCount
        {
            get
            {
                return omObject.RunningTasksCount;
            }
        }
        
        public Azure.Batch.Common.SchedulingState? SchedulingState
        {
            get
            {
                return omObject.SchedulingState;
            }
        }
        
        public PSStartTask StartTask
        {
            get
            {
                if (startTask == null 
                    && omObject.StartTask != null)
                {
                    startTask = new PSStartTask(omObject.StartTask);
                }
                return startTask;
            }
        }
        
        public PSStartTaskInformation StartTaskInformation
        {
            get
            {
                if (startTaskInformation == null 
                    && omObject.StartTaskInformation != null)
                {
                    startTaskInformation = new PSStartTaskInformation(omObject.StartTaskInformation);
                }
                return startTaskInformation;
            }
        }
        
        public Azure.Batch.Common.ComputeNodeState? State
        {
            get
            {
                return omObject.State;
            }
        }
        
        public DateTime? StateTransitionTime
        {
            get
            {
                return omObject.StateTransitionTime;
            }
        }
        
        public Int32? TotalTasksRun
        {
            get
            {
                return omObject.TotalTasksRun;
            }
        }
        
        public Int32? TotalTasksSucceeded
        {
            get
            {
                return omObject.TotalTasksSucceeded;
            }
        }
        
        public string Url
        {
            get
            {
                return omObject.Url;
            }
        }
        
        public string VirtualMachineSize
        {
            get
            {
                return omObject.VirtualMachineSize;
            }
        }
    }
}
