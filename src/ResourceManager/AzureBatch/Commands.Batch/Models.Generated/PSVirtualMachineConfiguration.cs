// -----------------------------------------------------------------------------
﻿//
﻿// Copyright Microsoft Corporation
﻿// Licensed under the Apache License, Version 2.0 (the "License");
﻿// you may not use this file except in compliance with the License.
﻿// You may obtain a copy of the License at
﻿// http://www.apache.org/licenses/LICENSE-2.0
﻿// Unless required by applicable law or agreed to in writing, software
﻿// distributed under the License is distributed on an "AS IS" BASIS,
﻿// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
﻿// See the License for the specific language governing permissions and
﻿// limitations under the License.
﻿// -----------------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Azure.Commands.Batch.Models
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using Azure.Batch;
    
    
    public partial class PSVirtualMachineConfiguration
    {
        
        internal VirtualMachineConfiguration omObject;
        
        private PSContainerConfiguration containerConfiguration;
        
        private IList<PSDataDisk> dataDisks;
        
        private PSImageReference imageReference;
        
        private PSOSDisk oSDisk;
        
        private PSWindowsConfiguration windowsConfiguration;
        
        public PSVirtualMachineConfiguration(PSImageReference imageReference, string nodeAgentSkuId)
        {
            omObject = new VirtualMachineConfiguration(imageReference.omObject, nodeAgentSkuId);
        }
        
        internal PSVirtualMachineConfiguration(VirtualMachineConfiguration omObject)
        {
            if (omObject == null)
            {
                throw new ArgumentNullException("omObject");
            }
            this.omObject = omObject;
        }
        
        public PSContainerConfiguration ContainerConfiguration
        {
            get
            {
                if (containerConfiguration == null 
                    && omObject.ContainerConfiguration != null)
                {
                    containerConfiguration = new PSContainerConfiguration(omObject.ContainerConfiguration);
                }
                return containerConfiguration;
            }
            set
            {
                if (value == null)
                {
                    omObject.ContainerConfiguration = null;
                }
                else
                {
                    omObject.ContainerConfiguration = value.omObject;
                }
                containerConfiguration = value;
            }
        }
        
        public IList<PSDataDisk> DataDisks
        {
            get
            {
                if (dataDisks == null 
                    && omObject.DataDisks != null)
                {
                    List<PSDataDisk> list;
                    list = new List<PSDataDisk>();
                    IEnumerator<DataDisk> enumerator;
                    enumerator = omObject.DataDisks.GetEnumerator();
                    for (
                    ; enumerator.MoveNext(); 
                    )
                    {
                        list.Add(new PSDataDisk(enumerator.Current));
                    }
                    dataDisks = list;
                }
                return dataDisks;
            }
            set
            {
                if (value == null)
                {
                    omObject.DataDisks = null;
                }
                else
                {
                    omObject.DataDisks = new List<DataDisk>();
                }
                dataDisks = value;
            }
        }
        
        public PSImageReference ImageReference
        {
            get
            {
                if (imageReference == null 
                    && omObject.ImageReference != null)
                {
                    imageReference = new PSImageReference(omObject.ImageReference);
                }
                return imageReference;
            }
            set
            {
                if (value == null)
                {
                    omObject.ImageReference = null;
                }
                else
                {
                    omObject.ImageReference = value.omObject;
                }
                imageReference = value;
            }
        }
        
        public string LicenseType
        {
            get
            {
                return omObject.LicenseType;
            }
            set
            {
                omObject.LicenseType = value;
            }
        }
        
        public string NodeAgentSkuId
        {
            get
            {
                return omObject.NodeAgentSkuId;
            }
            set
            {
                omObject.NodeAgentSkuId = value;
            }
        }
        
        public PSOSDisk OSDisk
        {
            get
            {
                if (oSDisk == null 
                    && omObject.OSDisk != null)
                {
                    oSDisk = new PSOSDisk(omObject.OSDisk);
                }
                return oSDisk;
            }
            set
            {
                if (value == null)
                {
                    omObject.OSDisk = null;
                }
                else
                {
                    omObject.OSDisk = value.omObject;
                }
                oSDisk = value;
            }
        }
        
        public PSWindowsConfiguration WindowsConfiguration
        {
            get
            {
                if (windowsConfiguration == null 
                    && omObject.WindowsConfiguration != null)
                {
                    windowsConfiguration = new PSWindowsConfiguration(omObject.WindowsConfiguration);
                }
                return windowsConfiguration;
            }
            set
            {
                if (value == null)
                {
                    omObject.WindowsConfiguration = null;
                }
                else
                {
                    omObject.WindowsConfiguration = value.omObject;
                }
                windowsConfiguration = value;
            }
        }
    }
}
