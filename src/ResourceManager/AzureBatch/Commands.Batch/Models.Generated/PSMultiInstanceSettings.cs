// -----------------------------------------------------------------------------
﻿//
﻿// Copyright Microsoft Corporation
﻿// Licensed under the Apache License, Version 2.0 (the "License");
﻿// you may not use this file except in compliance with the License.
﻿// You may obtain a copy of the License at
﻿// http://www.apache.org/licenses/LICENSE-2.0
﻿// Unless required by applicable law or agreed to in writing, software
﻿// distributed under the License is distributed on an "AS IS" BASIS,
﻿// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
﻿// See the License for the specific language governing permissions and
﻿// limitations under the License.
﻿// -----------------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Azure.Commands.Batch.Models
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using Azure.Batch;
    
    
    public partial class PSMultiInstanceSettings
    {
        
        internal MultiInstanceSettings omObject;
        
        private IList<PSResourceFile> commonResourceFiles;
        
        public PSMultiInstanceSettings(string coordinationCommandLine, Nullable<int> numberOfInstances = null)
        {
            omObject = new MultiInstanceSettings(coordinationCommandLine, numberOfInstances);
        }
        
        internal PSMultiInstanceSettings(MultiInstanceSettings omObject)
        {
            if (omObject == null)
            {
                throw new ArgumentNullException("omObject");
            }
            this.omObject = omObject;
        }
        
        public IList<PSResourceFile> CommonResourceFiles
        {
            get
            {
                if (commonResourceFiles == null 
                    && omObject.CommonResourceFiles != null)
                {
                    List<PSResourceFile> list;
                    list = new List<PSResourceFile>();
                    IEnumerator<ResourceFile> enumerator;
                    enumerator = omObject.CommonResourceFiles.GetEnumerator();
                    for (
                    ; enumerator.MoveNext(); 
                    )
                    {
                        list.Add(new PSResourceFile(enumerator.Current));
                    }
                    commonResourceFiles = list;
                }
                return commonResourceFiles;
            }
            set
            {
                if (value == null)
                {
                    omObject.CommonResourceFiles = null;
                }
                else
                {
                    omObject.CommonResourceFiles = new List<ResourceFile>();
                }
                commonResourceFiles = value;
            }
        }
        
        public string CoordinationCommandLine
        {
            get
            {
                return omObject.CoordinationCommandLine;
            }
            set
            {
                omObject.CoordinationCommandLine = value;
            }
        }
        
        public Int32? NumberOfInstances
        {
            get
            {
                return omObject.NumberOfInstances;
            }
            set
            {
                omObject.NumberOfInstances = value;
            }
        }
    }
}
