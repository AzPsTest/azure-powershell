// -----------------------------------------------------------------------------
﻿//
﻿// Copyright Microsoft Corporation
﻿// Licensed under the Apache License, Version 2.0 (the "License");
﻿// you may not use this file except in compliance with the License.
﻿// You may obtain a copy of the License at
﻿// http://www.apache.org/licenses/LICENSE-2.0
﻿// Unless required by applicable law or agreed to in writing, software
﻿// distributed under the License is distributed on an "AS IS" BASIS,
﻿// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
﻿// See the License for the specific language governing permissions and
﻿// limitations under the License.
﻿// -----------------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Azure.Commands.Batch.Models
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using Azure.Batch;
    
    
    public partial class PSJobSpecification
    {
        
        internal JobSpecification omObject;
        
        private IList<PSEnvironmentSetting> commonEnvironmentSettings;
        
        private PSJobConstraints constraints;
        
        private PSJobManagerTask jobManagerTask;
        
        private PSJobPreparationTask jobPreparationTask;
        
        private PSJobReleaseTask jobReleaseTask;
        
        private IList<PSMetadataItem> metadata;
        
        private PSPoolInformation poolInformation;
        
        public PSJobSpecification()
        {
            omObject = new JobSpecification();
        }
        
        public PSJobSpecification(PSPoolInformation poolInformation)
        {
            omObject = new JobSpecification(poolInformation.omObject);
        }
        
        internal PSJobSpecification(JobSpecification omObject)
        {
            if (omObject == null)
            {
                throw new ArgumentNullException("omObject");
            }
            this.omObject = omObject;
        }
        
        public IList<PSEnvironmentSetting> CommonEnvironmentSettings
        {
            get
            {
                if (commonEnvironmentSettings == null 
                    && omObject.CommonEnvironmentSettings != null)
                {
                    List<PSEnvironmentSetting> list;
                    list = new List<PSEnvironmentSetting>();
                    IEnumerator<EnvironmentSetting> enumerator;
                    enumerator = omObject.CommonEnvironmentSettings.GetEnumerator();
                    for (
                    ; enumerator.MoveNext(); 
                    )
                    {
                        list.Add(new PSEnvironmentSetting(enumerator.Current));
                    }
                    commonEnvironmentSettings = list;
                }
                return commonEnvironmentSettings;
            }
            set
            {
                if (value == null)
                {
                    omObject.CommonEnvironmentSettings = null;
                }
                else
                {
                    omObject.CommonEnvironmentSettings = new List<EnvironmentSetting>();
                }
                commonEnvironmentSettings = value;
            }
        }
        
        public PSJobConstraints Constraints
        {
            get
            {
                if (constraints == null 
                    && omObject.Constraints != null)
                {
                    constraints = new PSJobConstraints(omObject.Constraints);
                }
                return constraints;
            }
            set
            {
                if (value == null)
                {
                    omObject.Constraints = null;
                }
                else
                {
                    omObject.Constraints = value.omObject;
                }
                constraints = value;
            }
        }
        
        public string DisplayName
        {
            get
            {
                return omObject.DisplayName;
            }
            set
            {
                omObject.DisplayName = value;
            }
        }
        
        public PSJobManagerTask JobManagerTask
        {
            get
            {
                if (jobManagerTask == null 
                    && omObject.JobManagerTask != null)
                {
                    jobManagerTask = new PSJobManagerTask(omObject.JobManagerTask);
                }
                return jobManagerTask;
            }
            set
            {
                if (value == null)
                {
                    omObject.JobManagerTask = null;
                }
                else
                {
                    omObject.JobManagerTask = value.omObject;
                }
                jobManagerTask = value;
            }
        }
        
        public PSJobPreparationTask JobPreparationTask
        {
            get
            {
                if (jobPreparationTask == null 
                    && omObject.JobPreparationTask != null)
                {
                    jobPreparationTask = new PSJobPreparationTask(omObject.JobPreparationTask);
                }
                return jobPreparationTask;
            }
            set
            {
                if (value == null)
                {
                    omObject.JobPreparationTask = null;
                }
                else
                {
                    omObject.JobPreparationTask = value.omObject;
                }
                jobPreparationTask = value;
            }
        }
        
        public PSJobReleaseTask JobReleaseTask
        {
            get
            {
                if (jobReleaseTask == null 
                    && omObject.JobReleaseTask != null)
                {
                    jobReleaseTask = new PSJobReleaseTask(omObject.JobReleaseTask);
                }
                return jobReleaseTask;
            }
            set
            {
                if (value == null)
                {
                    omObject.JobReleaseTask = null;
                }
                else
                {
                    omObject.JobReleaseTask = value.omObject;
                }
                jobReleaseTask = value;
            }
        }
        
        public IList<PSMetadataItem> Metadata
        {
            get
            {
                if (metadata == null 
                    && omObject.Metadata != null)
                {
                    List<PSMetadataItem> list;
                    list = new List<PSMetadataItem>();
                    IEnumerator<MetadataItem> enumerator;
                    enumerator = omObject.Metadata.GetEnumerator();
                    for (
                    ; enumerator.MoveNext(); 
                    )
                    {
                        list.Add(new PSMetadataItem(enumerator.Current));
                    }
                    metadata = list;
                }
                return metadata;
            }
            set
            {
                if (value == null)
                {
                    omObject.Metadata = null;
                }
                else
                {
                    omObject.Metadata = new List<MetadataItem>();
                }
                metadata = value;
            }
        }
        
        public Azure.Batch.Common.OnAllTasksComplete? OnAllTasksComplete
        {
            get
            {
                return omObject.OnAllTasksComplete;
            }
            set
            {
                omObject.OnAllTasksComplete = value;
            }
        }
        
        public Azure.Batch.Common.OnTaskFailure? OnTaskFailure
        {
            get
            {
                return omObject.OnTaskFailure;
            }
            set
            {
                omObject.OnTaskFailure = value;
            }
        }
        
        public PSPoolInformation PoolInformation
        {
            get
            {
                if (poolInformation == null 
                    && omObject.PoolInformation != null)
                {
                    poolInformation = new PSPoolInformation(omObject.PoolInformation);
                }
                return poolInformation;
            }
            set
            {
                if (value == null)
                {
                    omObject.PoolInformation = null;
                }
                else
                {
                    omObject.PoolInformation = value.omObject;
                }
                poolInformation = value;
            }
        }
        
        public Int32? Priority
        {
            get
            {
                return omObject.Priority;
            }
            set
            {
                omObject.Priority = value;
            }
        }
        
        public Boolean? UsesTaskDependencies
        {
            get
            {
                return omObject.UsesTaskDependencies;
            }
            set
            {
                omObject.UsesTaskDependencies = value;
            }
        }
    }
}
