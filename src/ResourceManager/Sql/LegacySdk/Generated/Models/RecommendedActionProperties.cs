// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Hyak.Common;
using Microsoft.Azure.Management.Sql.LegacySdk.Models;

namespace Microsoft.Azure.Management.Sql.LegacySdk.Models
{
    /// <summary>
    /// Represents the properties of an Azure SQL Advisor Recommended Ac.
    /// </summary>
    public partial class RecommendedActionProperties
    {
        private IDictionary<string, object> _details;
        
        /// <summary>
        /// Optional. Gets additional details specific to this recommended
        /// action
        /// </summary>
        public IDictionary<string, object> Details
        {
            get { return _details; }
            set { _details = value; }
        }
        
        private RecommendedActionErrorInfo _errorDetails;
        
        /// <summary>
        /// Optional. Gets the error details if and why this recommended action
        /// is put to Error state.
        /// </summary>
        public RecommendedActionErrorInfo ErrorDetails
        {
            get { return _errorDetails; }
            set { _errorDetails = value; }
        }
        
        private IList<RecommendedActionImpactInfo> _estimatedImpact;
        
        /// <summary>
        /// Optional. Gets the estimated impact info for this recommended
        /// action E.g., Estimated CPU gain, Estimated Disk Space change
        /// </summary>
        public IList<RecommendedActionImpactInfo> EstimatedImpact
        {
            get { return _estimatedImpact; }
            set { _estimatedImpact = value; }
        }
        
        private string _executeActionDuration;
        
        /// <summary>
        /// Optional. Gets the time taken for applying this recommended action
        /// on user resource. E.g., Time taken for index creation
        /// </summary>
        public string ExecuteActionDuration
        {
            get { return _executeActionDuration; }
            set { _executeActionDuration = value; }
        }
        
        private string _executeActionInitiatedBy;
        
        /// <summary>
        /// Optional. Gets if approval for applying this recommended action is
        /// given by User/System.
        /// </summary>
        public string ExecuteActionInitiatedBy
        {
            get { return _executeActionInitiatedBy; }
            set { _executeActionInitiatedBy = value; }
        }
        
        private DateTime? _executeActionInitiatedTime;
        
        /// <summary>
        /// Optional. Gets the time when this recommended action is approved
        /// for execution
        /// </summary>
        public DateTime? ExecuteActionInitiatedTime
        {
            get { return _executeActionInitiatedTime; }
            set { _executeActionInitiatedTime = value; }
        }
        
        private DateTime? _executeActionStartTime;
        
        /// <summary>
        /// Optional. Gets the time when system started applying this
        /// recommended action on the user resource. E.g., Index creation
        /// start time
        /// </summary>
        public DateTime? ExecuteActionStartTime
        {
            get { return _executeActionStartTime; }
            set { _executeActionStartTime = value; }
        }
        
        private RecommendedActionImplementationInfo _implementationDetails;
        
        /// <summary>
        /// Optional. Gets the implementation details of this recommended
        /// action for user to apply it manually.
        /// </summary>
        public RecommendedActionImplementationInfo ImplementationDetails
        {
            get { return _implementationDetails; }
            set { _implementationDetails = value; }
        }
        
        private bool? _isArchivedAction;
        
        /// <summary>
        /// Optional. Gets if this recommended action was already suggested
        /// some time ago but user chose to ignore this and System recommends
        /// again.
        /// </summary>
        public bool? IsArchivedAction
        {
            get { return _isArchivedAction; }
            set { _isArchivedAction = value; }
        }
        
        private bool? _isExecutableAction;
        
        /// <summary>
        /// Optional. Gets if this recommended action is actionable to User
        /// </summary>
        public bool? IsExecutableAction
        {
            get { return _isExecutableAction; }
            set { _isExecutableAction = value; }
        }
        
        private bool? _isRevertableAction;
        
        /// <summary>
        /// Optional. Gets if changes applied by this recommended action can be
        /// reverted by User
        /// </summary>
        public bool? IsRevertableAction
        {
            get { return _isRevertableAction; }
            set { _isRevertableAction = value; }
        }
        
        private DateTime _lastRefresh;
        
        /// <summary>
        /// Optional. Gets time when this Recommended Action was last refreshed.
        /// </summary>
        public DateTime LastRefresh
        {
            get { return _lastRefresh; }
            set { _lastRefresh = value; }
        }
        
        private IList<string> _linkedObjects;
        
        /// <summary>
        /// Optional. Gets the observed/actual impact info for this recommended
        /// action E.g., Actual CPU gain, Actual Disk Space change
        /// </summary>
        public IList<string> LinkedObjects
        {
            get { return _linkedObjects; }
            set { _linkedObjects = value; }
        }
        
        private IList<RecommendedActionImpactInfo> _observedImpact;
        
        /// <summary>
        /// Optional. Gets the observed/actual impact info for this recommended
        /// action E.g., Actual CPU gain, Actual Disk Space change
        /// </summary>
        public IList<RecommendedActionImpactInfo> ObservedImpact
        {
            get { return _observedImpact; }
            set { _observedImpact = value; }
        }
        
        private string _recommendationReason;
        
        /// <summary>
        /// Optional. Gets the reason for recommending this action. E.g.,
        /// DuplicateIndex
        /// </summary>
        public string RecommendationReason
        {
            get { return _recommendationReason; }
            set { _recommendationReason = value; }
        }
        
        private string _revertActionDuration;
        
        /// <summary>
        /// Optional. Gets the time taken for reverting changes of this
        /// recommended action on user resource. E.g., Time taken for dropping
        /// the created index.
        /// </summary>
        public string RevertActionDuration
        {
            get { return _revertActionDuration; }
            set { _revertActionDuration = value; }
        }
        
        private string _revertActionInitiatedBy;
        
        /// <summary>
        /// Optional. Gets if approval for reverting this recommended action is
        /// given by User/System.
        /// </summary>
        public string RevertActionInitiatedBy
        {
            get { return _revertActionInitiatedBy; }
            set { _revertActionInitiatedBy = value; }
        }
        
        private DateTime? _revertActionInitiatedTime;
        
        /// <summary>
        /// Optional. Gets the time when this recommended action is approved
        /// for revert
        /// </summary>
        public DateTime? RevertActionInitiatedTime
        {
            get { return _revertActionInitiatedTime; }
            set { _revertActionInitiatedTime = value; }
        }
        
        private DateTime? _revertActionStartTime;
        
        /// <summary>
        /// Optional. Gets the time when system started reverting changes of
        /// this recommended action on user resource. E.g., Time when Index
        /// drop is executed.
        /// </summary>
        public DateTime? RevertActionStartTime
        {
            get { return _revertActionStartTime; }
            set { _revertActionStartTime = value; }
        }
        
        private int _score;
        
        /// <summary>
        /// Optional. Gets the impact of this recommended actions. Possible
        /// values are 1 - Low impact, 2 - Medium Impact and 3 - High Impact
        /// </summary>
        public int Score
        {
            get { return _score; }
            set { _score = value; }
        }
        
        private RecommendedActionStateInfo _state;
        
        /// <summary>
        /// Optional. Gets the info of the state the Recommended Action is in.
        /// </summary>
        public RecommendedActionStateInfo State
        {
            get { return _state; }
            set { _state = value; }
        }
        
        private IList<RecommendedActionMetricInfo> _timeSeries;
        
        /// <summary>
        /// Optional. Gets the time series info of metrics for this recommended
        /// action E.g., CPU time series
        /// </summary>
        public IList<RecommendedActionMetricInfo> TimeSeries
        {
            get { return _timeSeries; }
            set { _timeSeries = value; }
        }
        
        private DateTime _validSince;
        
        /// <summary>
        /// Optional. Gets the time since when this Recommended action is valid.
        /// </summary>
        public DateTime ValidSince
        {
            get { return _validSince; }
            set { _validSince = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RecommendedActionProperties class.
        /// </summary>
        public RecommendedActionProperties()
        {
            Details = new LazyDictionary<string, object>();
            EstimatedImpact = new LazyList<RecommendedActionImpactInfo>();
            LinkedObjects = new LazyList<string>();
            ObservedImpact = new LazyList<RecommendedActionImpactInfo>();
            TimeSeries = new LazyList<RecommendedActionMetricInfo>();
        }
    }
}
